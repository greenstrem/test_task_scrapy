import json
import os
import ast
from typing import Any, Dict, List
from prompt_toolkit import prompt
from prompt_toolkit.shortcuts import yes_no_dialog
from prompt_toolkit import print_formatted_text as print
from prompt_toolkit.formatted_text import FormattedText

class ConfigManager:
    def __init__(self, config_file: str):
        self.config_file = config_file
        self._load_config()

    def _load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é. –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–æ–∑–¥–∞—Ç—å –µ–≥–æ!"""
        if not os.path.exists(self.config_file):
            print(FormattedText([("bold red", f"–ö–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª '{self.config_file}' –Ω–µ –Ω–∞–π–¥–µ–Ω. üò¢")]))
            if yes_no_dialog(
                title="–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥?",
                text="–•–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª?"
            ).run():
                self._create_default_config()
            else:
                raise FileNotFoundError("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —Å–æ–∑–¥–∞–Ω. –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

        with open(self.config_file, 'r', encoding='utf-8') as file:
            self.config = json.load(file)

    def _create_default_config(self):
        print(FormattedText([("bold cyan", "–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞...")]))

        # –ë–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω –∫–æ–Ω—Ñ–∏–≥–∞
        default_config = {
            "city_id": int(prompt("–í–≤–µ–¥–∏—Ç–µ ID –≥–æ—Ä–æ–¥–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 55): ", default="55")),
            "reg_name": prompt("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥'): ", default="–ï–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥"),
            "categories": ["vsye-po-35"],
            "proxy": {
                "enabled": False,  
                "list": []  
            },
            "concurrency": {
                "max_threads": 3,
                "delay": 2,
                "retries": 3
            },
            "user_agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"
        }

        with open(self.config_file, 'w', encoding='utf-8') as file:
            json.dump(default_config, file, ensure_ascii=False, indent=4)
        
        print(FormattedText([("bold green", f"–ö–æ–Ω—Ñ–∏–≥ —Ñ–∞–π–ª '{self.config_file}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! üéâ")]))
        self.config = default_config

    def get(self, key: str, default: Any = None) -> Any:
        return self.config.get(key, default)
    
    def get_city_id(self):
        return self.get("city_id")

    def get_categories(self):
        return self.get("categories", [])

    def get_proxy(self):
        return self.get("proxy", {})

    def get_concurrency(self):
        return self.get("concurrency", {})

    def get_user_agent(self):
        return self.get("user_agent")
    
    
    def get_delay(self):
        return self.get("concurrency", {}).get("delay", 0)

    def set(self, key: str, value: Any):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –∫–ª—é—á—É –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        self.config[key] = value
        self._save_config()

    def _save_config(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≤ —Ñ–∞–π–ª."""
        with open(self.config_file, 'w', encoding='utf-8') as file:
            json.dump(self.config, file, ensure_ascii=False, indent=4)

def print_config(config: Dict[str, Any]):
    """–ö—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    print(FormattedText([("bold cyan", "–¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")]))
    for key, value in config.items():
        print(FormattedText([("bold green", f"{key}:"), ("", f" {value}")]))

def parse_value(value: str) -> Any:
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö."""
    try:
        if value.lower() in ("true", "false"):
            return value.lower() == "true"
        return ast.literal_eval(value)
    except (ValueError, SyntaxError):
        return value

def edit_config(config_manager: ConfigManager):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
    while True:
        key = prompt("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á (–∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞): ")
        if key.lower() == "exit":
            break

        current_value = config_manager.get(key)
        if current_value is not None:
            print(FormattedText([("bold yellow", f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è '{key}':"), ("", f" {current_value}")]))
        else:
            print(FormattedText([("bold yellow", f"–ö–ª—é—á '{key}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π?")]))

        if isinstance(current_value, dict):
            print(FormattedText([("bold cyan", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è. –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–∏ –∏ –∑–Ω–∞—á–µ–Ω–∏—è.")]))
            new_dict = {}
            for sub_key, sub_value in current_value.items():
                new_value = prompt(f"–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è '{sub_key}' (—Ç–µ–∫—É—â–µ–µ: {sub_value}): ", default=str(sub_value))
                new_dict[sub_key] = parse_value(new_value)
            config_manager.set(key, new_dict)
        elif isinstance(current_value, list):
            print(FormattedText([("bold cyan", "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞. –í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")]))
            new_list = prompt(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ (—Ç–µ–∫—É—â–∏–µ: {current_value}): ", default=", ".join(map(str, current_value)))
            new_list = [parse_value(item.strip()) for item in new_list.split(",")]
            config_manager.set(key, new_list)
        else:
            value = prompt(f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è '{key}': ", default=str(current_value))
            config_manager.set(key, parse_value(value))

        print(FormattedText([("bold green", f"–£—Å–ø–µ—à–Ω–æ: –ö–ª—é—á '{key}' –æ–±–Ω–æ–≤–ª–µ–Ω.")]))

def main():
    config_manager = ConfigManager("config.json")

    while True:
        print(FormattedText([("bold cyan", "–ú–µ–Ω—é:")]))
        print(FormattedText([("bold green", "1. –ü–æ–∫–∞–∑–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")]))
        print(FormattedText([("bold green", "2. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é")]))
        print(FormattedText([("bold green", "3. –í—ã–π—Ç–∏")]))

        choice = prompt("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-3): ")

        if choice == "1":
            print_config(config_manager.config)
        elif choice == "2":
            edit_config(config_manager)
        elif choice == "3":
            break
        else:
            print(FormattedText([("bold red", "–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")]))

if __name__ == "__main__":
    main()